-- Chad To Do 2/17/2019

Translate to core:
	* Typeclasses don't use dictionaries
	* Instead deep copy every version of the AST for the instances, modified/name mangled to use the types (recursive)
	* Make everything concrete types in core (no polymorphism), don't need big/small lambda stuff
	* Don't have to worry about .forall or lambdas etc..
	* Should make typing core simpler



-- Chad To Do 2/10/2019
Switch to new ast symbol system (no necrovar etc..)
	1. make a NecroCoreAstSymbol and use that instead
	2. finish implementing all the transformations  for the Core AST
	3. Make it typed (somehow...), can use NecroTypes (shouldn't need higher ranked polymorphism
	4. driver.c (around line 83) --> all the phases work in a uniform way, Core needs to work in the same way!

type inference testing, the AST and types
	NecroTypeExecUnify (or something) -> something like that -> assert result and expected

-- Types and runtime
We need to monomorphize all functions.


-- To Do 7/1/2018

1) bind rec -> Different node, not just flag
    If one declaration in a declaration group -> Simple bind
    If multiple declarations in a group -> They're all bind recs
    :: Caveat
        unless they are *ALL* bindings to the same name, which will be desugared to a case statement as a single bind. 
        Example:
        foo Nothing = 0
        foo (Just x) = x

    however even one thing with a different name, then all of them are bind recs



2) Make nested functions work in core:
    example: Things that aren't simple assignment!



