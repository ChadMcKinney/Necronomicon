---------------------
-- Lucid Synchrone meets FRP
---------------------
-- Lucid synchron Clocks  are simply Event()
-- Lucid synchron Signals are simply Event a
-- Clock calculus becomes Event Calculus
-- Like Lucid Synchrone establish parent / child relationship of clocks
-- Unlike Lucid Synchrone the top level clock isn't necessarily fixed,
-- instead a theoretically infinite resolution clock
-- Probably changes some things...
-- Keep type signature + clock signature concept

-- Clock extension paper
-- http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.164.159&rep=rep1&type=pdf

-- Adaptor Combinators
when :: a -> Event b -> a
when :  t -> (c : t) -> t on c

on :: a  -> Event b  -> Event a
on :  t1 -> (c : t2) -> (c : t2)

observe :: a  -> b
observe :  t1 -> t2

latch :: Event a  -> b
latch :  (c : t1) -> t2

-- ???
share :: a        -> a
share :  (t1 : t) -> t when t1 or t2

-- Musical combinators
pattern :: Time   -> Event ()
pattern :  t on c -> (c : t).t

poly :: Num b => (a -> b)               -> Event a  -> b -- Black magic in here???
poly :           ((t2 -> t2) : t1 on c) -> (c : t1) -> t2

delay :: a -> a -> a

fby :: a -> a -> a
fby :  t -> t -> t

either :: Event () -> a      -> a           -> a
either :  (c : t)  -> t on c -> t on not c  -> t

merge :: Event a  -> Event a  -> Event a
merge :  (c1 : t) -> (c2 : t) -> t on (c1 or c2)

match :: Int     -> [a] -> a
match :  (c : t) -> ?   -> t

-- sequences of streams !?!?!?! How do they work?!?!?!
seq :: [a]         -> a
seq :  ([t'] : t)  -> t

mouseClick :: Event ()
mouseClick : (c : Sys)

mouseXIn :: Input Float
mouseXIn :  Sys

input pulseDemon <- loadBuffer "pulseDemon.aiff"
input mouseX     <- mouseXIn

synth :: Audio -> Audio -> Audio
synth freq = osc where
    osc = 440 * observe mouseX + freq * (0 `fby` osc) |> sinOsc

main :: Audio
main = synths where
    freq1  = mouseX `on` mouseClick
    freq2  = d2f minor (seq [0, 1, 2, observe mouseX |> take 1, latch freq2]) `when` pattern (seq [0.25, 0.5, 0.25, 0.5])
    synths = poly synth (merge freq1 freq2)

---------------------
-- Lucid Synchrone semantics, tweaked
---------------------
pattern :: Time   -> Clock
pattern :  t on c -> (c : t)

data Frozen a = Frozen a -- ... theoretical higher order stream type

poly :: Num a => Frozen a -> a -- Black magic in here???
poly :           t        -> t

mouseX :: Event Float
mouseX :  Sys

-- example
frozenStream :: Frozen Audio
frozenStream :  t
frozenStream =  lift1 synth (realToFrac mouseX)

---------------------
-- Parallel Worlds
--------------------
-- Streams are head strict, tail lazy
-- if/then/else is strict in both arms (both sides compute each tick), but only returns result from one side
-- case / pattern matching computes in all arms, supplying variables which have the underlying YIELD value, only the matching pattern's result is returned
-- This forces if/then/else and case/pattern matching to use the same clock as their conditionals, i.e. a lot less clock shenanigans
-- Use a "switch" combinator for truly switching between streams which are "frozen" then revived.
-- Use phantom clocks for anything else which has clock strangeness (patterns, poly, switch, sequences, etc)
-- Simple notation for phantom clocks?
-- A different notion to enforce this?
-- Don't use full monadic IO, instead use input streams, and output data via main

pattern :: Time            -> a               -> Event a
pattern :  (forall t1. t1) -> (forall t2. t2) -> t3

seq     :: [a]             -> a
seq     :  (forall t1. t1) -> t2

select  :: Event Int -> [a]             -> a
select  :  t1        -> (forall t2. t2) -> t1

switch  :: Event Int -> [a]               -> a
switch  :  t1        -> (forall t2. [t2]) -> t1

poly    :: Num b => (a -> b)        -> Event a -> b
poly    :  (forall t1. t1 -> t1):t2 -> t2      -> t2

-- Observe a value at evolving at a different clock rate...
observe :: a  -> a
observe :  t1 -> t2

latch  :: Event a -> a
latch  :  t1      -> t2

-- fby unaffected? Ok, with 1 sample memory overhead?
fby :: a -> a -> a

merge :: Event a -> Event a -> Event a
on    :: a       -> Event b -> Event a

mouseClickIn :: Input (Event ())
mouseXIn     :: Input Float

input pulseDemon <- loadBuffer "pulseDemon.aiff"
input mouseX     <- mouseXIn
input mouseClick <- mouseClickIn

synth :: Audio -> Audio -> Audio
synth freq = osc where
    osc = 440 * observe mouseX + freq * (0 `fby` osc) |> sinOsc

pat :: Event Audio
pat = pattern times values where
    times  = seq [0.25, 0.5, 0.25, 0.5]
    values = seq [0, 1, 2, observe mouseX |> take 1, latch freq2 |> take 2] |> d2f minor

main :: Audio
main = synths where
    freq1  = mouseX `on` mouseClick
    freq2  = pat
    synths = poly synth (merge freq1 freq2)

---------------------
-- Phantom SubTyping Lifetimes
--------------------
-- Streams are head strict, tail lazy
-- Influenced by Rust lifetimes
-- Lifetimes are enforced through a subtyping mechanism
-- You can use any value / function as long as the terms have a subtyping relation between eachother
-- In lieu of full blown subtyping inference we use a hierarchy of types established through Phantom types
-- Each combinator that introduces a new lifetime introduces a new phantom type which has a subtyping relationship with the current life time it is in.
-- This means we don't need explicit "resample" combinators, but we can still enforce lifetime invariants
-- Because it's more implicit in nature we should be able to use it in a more fine-grained fashion
-- Any stream in the same life time must start at the same start time, be present every moment of the stream, and end at the exact same time.
-- Otherwise it is considered to be a new lifetime
-- pattern, seq, select, switch, poly, and fby would all introduce new lifetimes
-- No more "lifetime signatures?"
-- Star notation indicates a new lifetime scope

pattern :: Time:* -> a:* -> Event a

seq     :: [a:*]:'static -> a

switch  :: a -> Event (a:*) -> a

-- poly    :: Num b => (a -> b)        -> Event a -> b
-- poly    :  (forall t1. t1 -> t1):t2 -> t2      -> t2

poly    :: Num a => Event (a:*) -> a

-- Makes a "new" instance of a stream in a different lifetime
new :: a:? -> a

latch  :: Event a -> a
latch  :  t1      -> t2

-- fby unaffected? Ok, with 1 sample memory overhead?
fby :: a -> a -> a

merge :: Event a -> Event a -> Event a
on    :: a       -> Event b -> Event a

mouseClickIn :: Input (Event ())
mouseXIn     :: Input Float

input pulseDemon <- loadBuffer "pulseDemon.aiff"
input mouseX     <- mouseXIn
input mouseClick <- mouseClickIn

synth :: Audio -> Audio
synth freq = osc where
    osc = 440 * mouseX + freq * (0 `fby` osc) |> sinOsc

pat :: Event Audio
pat = pattern times values where
    times  = seq [0.25, 0.5, 0.25, 0.5] * new mul
    values = seq [0, 1, 2, take 1 mouseX, take 2 values] * new mul
    mul    = seq [0.5, 1, 2]

main :: Audio
main = synths where
    freq1  = mouseX `on` mouseClick |> realToFrac
    freq2  = pat
    synths = map synth (merge freq1 freq2) |> poly

---------------------
-- Lexical Time
--------------------
-- Time is lexically scoped
-- Functions are polymorphic and have polymorphic time (i.e. Things in the body of the function get their notion of time where the function is APPLIED)
-- Values are monomorphic and are monomorphic in their time (i.e. Where a value is defined is where it gets its notion of time from)
-- Sequences, represented by {}, are frozen, lazy processions of streams that have dynamic time
-- Certain parts of the language introduce new time scopes:
--   * if/then/else
--   * case
--   * sequences, i.e. {}
-- For simplicity there is no fby, use sequences instead.
-- Values cannot be defined by themselves in the same time scope
-- Higher-order functions and recursive functions will require some kind of "apply" combinator to be inserted by the compiler

pattern :: Sequence (Time, a) -> Event a

seq     :: Sequence a -> a

poly    :: Num b => (a -> b) -> Event a -> b

latch  :: Event a -> a

merge :: Event a -> Event a -> Event a
on    :: a       -> Event b -> Event a

mouseClickIn :: Input (Event ())
mouseXIn     :: Input Float

rand :: Rand a => a
srand :: Rand a => Int -> a

input pulseDemon <- loadBuffer "pulseDemon.aiff"
input mouseX     <- mouseXIn
input mouseClick <- mouseClickIn

synth :: Audio -> Audio
synth freq = osc where
    osc = 440 * mouseX + freq * seq {0, osc} |> sinOsc

pat :: Event Audio
pat = pattern <| zip times values where
    times  = {0.25, 0.5, 0.25, 0.5} * mul
    values = {0, 1, 2, take 1 mouseX, latch pat |> take 2} * mul -- {} is an instance of num?
    mul    = {0.5, 1, 2}

ifTest :: Bool -> Int
ifTest up = if up then countUp else countDown where
    countUp   = seq {0, countUp   + 1}
    countDown = seq {0, countDown - 1}

-- Sequence sublanguage, influenced by list comprehensions (can be used as an expression)
coolBeat :: Sequence (Time, Float)
coolBeat = [
    x y y     z
    _ x [5 z] x
    _ 0 [1 2] y |
    x <- osc  * 4,
    y <- osc2 + 3,
    z <- osc3 / 4]

-- Can we get rid of sequences, and what would that look like!?
-- Sequence sublanguage, influenced by let/in (still an expression, but less alien)
coolBeat :: Float
coolBeat =
    let x = srand 1 - osc  * 4 - seq {0, x}
        y = srand 2 - osc2 + 3 + seq {0, y}
        z = srand 3 - osc3 / 4 * seq {0, z}
    in~ x y y     z
        _ x [5 z] x
        _ 0 [1 2] y

ifTest2 :: Bool -> Int
ifTest2 up = if up
    then let countUp   = seq {0, countUp   + 1} in countUp
    else let countDown = seq {0, countDown - 1} in countDown

main :: Audio
main = synths where
    freq1  = on mouseX mouseClick |> realToFrac
    freq2  = pat
    synths = poly synth (merge freq1 freq2)

-- TODO: Ixilang / Tidal sequence sublanguage

-----------------------
-- Time Streams
--------------------
-- All values are functions of t -> a
-- Can manipulate t as a part of the language
-- No Sequence type, instead combinators to manipulate time
-- Event types for when things happen at punctuated points in time
-- {x, y, ...} forms a normal value (implicit seq), is still lazy, but you can modify with time manipulation
-- Still have lexical time scopes
-- Values have an implicit timestamp!?
-- Some special combinators have access to that time stamp and can continue to consume the stream based on it?
-- Obviates the need for event type
-- All values in the language are a function of: (tio, ta) -> a, i.e. Actual real world time and the value's time
-- ta accrues over time and doesn't need to be "pure", works just like the accumulator in an oscillator
-- Does this allow for doing time manipulation (which affects ta, but leaves tio alone) while still being referentially transparent?
-- Each value also tracks the time (in (tio, ta)) of the last newly computed value
-- Use fby for feedback, i.e. osc = 1 + delay 0 osc, since seq doesn't exhibit fby style semantics
-- seq and fby differ in the fby reaches back in both tio and ta, whereas seq only affects ta, and takes tio as is!
-- Use delay instead of fby?
-- With seq semantics, no longer a need for take/strobe/End style semantics in streams. It simply jumps from slot to slot! Simpler!
-- IO keeps 1 buffer delay

-- Time manipulation
reverse :: a -> a -- Runs time (ta, not tio) backwards. Time is modulo, so it should play sequences backwards
speed :: Float -> a -> a

poly :: Num b => (a -> b) -> Event a -> b

merge :: Eventa -> Event a -> a
on    :: a -> Event b -> a

mouseClickIn :: Input (Event ())
mouseXIn     :: Input Float

delay :: a -> a -> a

pat :: a..a -> Event a

trand :: Rand a => a -> a -> a
srand :: Rand a => Int -> a -> a -> a

pulseDemon :: AudioBuffer
pulseDemon = loadBuffer "pulseDemon.aiff" world

synth :: Audio -> Audio
synth freq = osc
  where
    osc ~ 0 = 440 * mouseX + freq * osc |> sinOsc

-- Layout version
-- More elegant but doesn't easily allow for things like polyrhythms
fpat :: Pattern Audio
fpat = s * m |> speed 2
  where
    s = [ 0   1 _ 2 (sample mouseX) _ 0 ]
    m = [ 0.5 1 2 ]

-- Sequence sublanguage, influenced by let/in, dmd/seq.
-- dmd demands the value when the sequence gets to it
-- seq is a series of white space seperated expressions
-- "plays" the expressions in a sequence
-- Values in the dmd form are updated each time they are encountered by the seq form
coolBeat :: Pattern Float
coolBeat =
  [
    x y (y+y) z
    _ x [5 z] x
    _ 0 [1 2] y
  ]
  where
    x = trand 0 100 * sample mouseX * 4
    y = trand 0 100 * sample osc2   + 3
    z = trand 0 100 * sample osc3   / 4

ifTest :: Bool -> Int
ifTest up = if up then countUp else countDown
  where
    countUp   ~ 0 = countUp + 1
    countDown ~ 0 = countUp - 1

main :: Audio
main = synths where
  freq1  =
    on mouseX mouseClick
    |> realToFrac

  synths =
    play tempo60 fpat
      <> freq1
      |> poly synth

-- No longer have pinned values?!?!?
-- -- now equivalant?
-- -- How to have/use/reference long running values (like a global ambient noise or some such you pipe in?)
-- -- <- pins a value to being strictly computed at that scope. Only works for monomorphic values!!!
-- ifTest :: Bool -> Int
-- ifTest up = if up then countUp else countDown where
--     countUp   <- seq 0 (countUp + 1)
--     countDown <- seq 0 (countUp - 1)
