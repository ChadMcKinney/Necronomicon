-- ALERT! - Sleep times don't seem to work correctly from msys/cygwin/mintty
-- ALERT! - Use an actual CMD prompt for correct necro usage!
-- necro usage: necro.exe \path\to\file.necro -jit

-- data Maybe a     = Just a | Nothing
-- data Color       = Red | Green | Blue
-- data CakeOrDeath = Cake | Death
-- data Tuple a b   = Tuple a b

-- returnAddOne :: Int -> (Int -> Int)
-- returnAddOne z = addOne

-- gimme :: (Int -> Int) -> Int
-- gimme f = f 0

-- maybeStateful :: Int -> Int
-- maybeStateful x = x

-- data CoolF = CoolF (Int -> Int)

-- gimmeIntz :: CoolF -> Int
-- gimmeIntz cf =
--     case cf of
--         CoolF f -> 100

-- addOne :: Int -> Int -> Int
-- addOne x y = x + y
--
-- weDemandApps :: (Int -> Int -> Int) -> Int -> Int -> Int
-- weDemandApps f x y = f x y
--
-- appsAllTheWayDown :: ((Int -> Int -> Int) -> Int -> Int -> Int) -> (Int -> Int -> Int) -> Int -> Int -> Int
-- appsAllTheWayDown ff f x y =  ff f x y
--
-- main :: Int
-- main = appsAllTheWayDown weDemandApps addOne 50 100

-- countFrom :: Int -> Int
-- countFrom x = x + d where
--     d = 1 + delay 0 d

-- -- To handle this we have to detect over application
-- addThenSub :: Int -> Int
-- addThenSub x = (delay addOne subOne) x

-- flipFlop :: Int -> Int
-- flipFlop x = pingPong x
--     -- f x = addOne x
--     -- f = delay addOne (delay subOne f)

-- TODO: Do we need to sort out PAPPs first!?

-- -- Flag to note if it's a closure or a normal function!?
-- -- If it's a closure you don't need to closure-ify when it's referred to as a closure
-- pingPong :: Int -> Int
-- pingPong = delay addOne (delay subOne pingPong)

-- subOne :: Int -> Int
-- subOne x = x - 1

-- id :: a -> a
-- id x = x

-- addOne :: Int -> Int
-- addOne x = x + 1
--
-- addOne' :: Int -> Int
-- addOne' = addOne
--
-- addTwo :: Int -> Int -> Int
-- addTwo x y = x + y
--
-- addTwo' :: Int -> Int -> Int
-- addTwo' x = addTwo x

adder :: Int -> Int
adder x = x + 1

adder' :: Int -> Int
adder' = \x -> x + 1

main :: Int
main = 100

-- mouseX :: Int
-- mouseX = getMouseX world
--
-- weDemandApps :: (Int -> Int) -> Int -> Int
-- weDemandApps f x = f x
--
-- appsAllTheWayDown :: ((Int -> Int) -> Int -> Int) -> (Int -> Int) -> Int -> Int
-- appsAllTheWayDown ff f x =  ff f x
--
--
-- moarApps :: (((Int -> Int) -> Int -> Int) -> (Int -> Int) -> Int -> Int) ->
--              ((Int -> Int) -> Int -> Int) -> (Int -> Int) -> Int -> Int
-- moarApps fff ff f x =  fff ff f x
--
--
-- addMouseXAndCounter :: Int -> Int
-- addMouseXAndCounter x = x + d + mouseX where
--     d = 1000 + delay 0 d
--
-- main :: Int
-- main = moarApps appsAllTheWayDown weDemandApps addMouseXAndCounter 0

-- coolAddOne :: CoolF
-- coolAddOne = CoolF addOne

-- main :: Int
-- main = weDemandApps addOne 50

-- main :: Int
-- main = weDemandApps addOne 50 100

-- main :: Int
-- main = 10

-- forTest1 :: (Num a, Eq a) => a -> a
-- forTest1 x = x

-- forTest2 :: (Eq a, Num a) => a -> a
-- forTest2 x = x

-- forTests :: (Num a, Eq a) => (a -> a) -> (a -> a) -> a -> a
-- forTests f1 f2 x = x

-- forTest :: Int
-- forTest = forTests forTest1 forTest2 10

-- mouseX :: Int
-- mouseX = getMouseX world

-- mouseY :: Int
-- mouseY = getMouseY world

-- main :: Int
-- main = mouseX

-- data World = World
-- inputMouseX :: World -> Int

-- mouseX :: Int
-- mouseX = inputMouseX world

-- maybeInt :: Maybe (Maybe Int) -> Int
-- maybeInt mi =
--   case mi of
--     Just (Just _) -> 0
--     Just Nothing  -> 1
--     Nothing       -> 2

-- main :: Int
-- main = maybeInt Nothing

-- maybeInt :: Maybe (Maybe Color) -> Int
-- maybeInt mi = case mi of
--     Just (Just Green) -> 0
--     Just (Just Blue)  -> 1
--     Just Nothing      -> 2
--     _                 -> 3

-- maybeInt :: Maybe (Tuple Color CakeOrDeath) -> Int
-- maybeInt m = case m of
--     Just (Tuple Red   Death) -> 0
--     Just (Tuple Green Cake)  -> 1
--     Just (Tuple _     Cake)  -> 2
--     Just (Tuple _     Death) -> 3
--     Nothing                  -> 4
-- main :: Int
-- main = maybeInt (Just (Tuple Green Cake))

-- duplicateCase :: Maybe Int -> Int
-- duplicateCase mi =
--     case mi of
--         Just _  -> 0
--         Nothing -> 1
--         Nothing -> 2
-- main :: Int
-- main = duplicateCase (Just 0)

-- missingCase :: Maybe Int -> Int
-- missingCase mi =
--     case mi of
--         Nothing -> 0
--         _       ->
--             case mi of
--                 Nothing -> 0
-- main :: Int
-- main = missingCase (Just 0)

-- nestedCase :: Maybe (Maybe Int) -> Int
-- nestedCase mi =
--     case mi of
--         Just _ ->
--             case mi of
--                 Just (Just _) -> 0
--                 Just Nothing  -> 1
--                 -- _             -> 2
--         _ -> 3
-- main :: Int
-- main = nestedCase (Just (Just 1))

-- twoCases :: Maybe Int -> Maybe Int -> Int
-- twoCases x y =
--     case x of
--         Nothing -> 0
--         Just _  ->
--             case y of
--                 Nothing -> 1
--                 Just _  -> 2
-- main :: Int
-- main = twoCases (Just 1) Nothing
--

-- -- Stateful nodes with case statements = KABOOM!
-- caseRec :: Color -> Int
-- caseRec c = case c of
--                 Red   -> x + caseRec Green
--                 Green -> 1 + caseRec Blue
--                 Blue  -> 0
--     where
--         x = 1 + delay 0 x
-- main :: Int
-- main = caseRec Red

-- caseBinding0 :: Maybe Int -> Int
-- caseBinding0 mi =
--     case mi of
--         mi2 -> 0 -- TODO / NOTE: Chad, this should work!
-- main :: Int
-- main = caseBinding0 Nothing

-- caseBinding1 :: Maybe Int -> Int
-- caseBinding1 mi =
--     case mi of
--         Just i  -> i * 2
--         Nothing -> 1
-- main :: Int
-- main = caseBinding1 (Just 333)

-- TODO: test tuple with vars

-- caseBinding1 :: Tuple (Maybe Int) (Maybe Int) -> Int
-- caseBinding1 mi =
--     case mi of
--         Tuple (Just x) (Just y) -> x - y
--         Tuple (Just x) Nothing  -> x * x
--         Tuple Nothing  (Just y) -> y + y
--         _ -> 0
-- main :: Int
-- main = caseBinding1 (Tuple (Just 100) (Just 10))
-- -- main = caseBinding1 (Tuple (Just 100) Nothing)
-- -- main = caseBinding1 (Tuple Nothing (Just 33))

-- caseBinding2 :: Tuple Int Int -> Int
-- caseBinding2 mi =
--     case mi of
--         Tuple x y -> x - y
-- main :: Int
-- main = caseBinding2 (Tuple 100 10)
-- -- main = caseBinding1 (Tuple (Just 100) Nothing)
-- -- main = caseBinding1 (Tuple Nothing (Just 33))

-- data Both a b = This a | That b | Both a b
-- caseBinding3 :: Both Int Int -> Int
-- caseBinding3 b =
--     case b of
--         This x   -> x + 1
--         That y   -> y - 1
--         Both x y -> x * y
-- main :: Int
-- -- main = caseBinding3 (This 10)
-- -- main = caseBinding3 (That 20)
-- main = caseBinding3 (Both 4 100)

-- nestedTuple :: Maybe (Tuple Int Int) -> Int
-- nestedTuple mt =
--     case mt of
--         Just (Tuple x y) -> x - y
--         Nothing          -> 0
-- main :: Int
-- main = nestedTuple (Just (Tuple 20 10))

-- data Both a b = This a | That b | Both a b
-- caseBinding4 :: Both Int (Both Int Int) -> Int
-- caseBinding4 b =
--     case b of
--         This x            -> x
--         That (This y)     -> y
--         That (That y)     -> y * 2
--         That (Both y z)   -> y * z
--         Both x (This y)   -> x + y
--         Both x (That y)   -> x - y
--         Both x (Both y z) -> x * y * z
-- main :: Int
-- -- main = caseBinding4 (This 10)
-- -- main = caseBinding4 (That (This 100))
-- -- main = caseBinding4 (That (That 200))
-- -- main = caseBinding4 (That (Both 2 3))
-- -- main = caseBinding4 (Both 5 (This 10))
-- -- main = caseBinding4 (Both 4 (That 5))
-- main = caseBinding4 (Both 2 (Both 3 4))

-- fst :: Tuple a a -> a
-- fst t =
--     case t of
--         Tuple x _ -> x
-- main :: Int
-- main = fst (Tuple 100 10)

-- caseRec :: Color -> Int
-- caseRec c =
--     case c of
--         Red   -> let x = 1   + delay 0 x in x
--         Green -> let x = 10  + delay 0 x in x
--         Blue  -> let x = 100 + delay 0 x in x
-- main :: Int
-- main = caseRec c where
--     c = delay Red (delay Green (delay Blue c))

-- tupleInt :: Tuple Color CakeOrDeath -> Int
-- tupleInt t = case t of
--     Tuple Red Death -> 0
--     Tuple _   Cake  -> 1
--     Tuple _   Death -> 2
-- main :: Int
-- main = tupleInt (Tuple Red Cake)

-- -- TODO: Duplicate case error!
-- colorCode :: Color -> Int
-- colorCode c = case c of
--     Red   -> 0
--     Green -> 1
--     Blue  -> 2
-- main :: Int
-- main = colorCode Blue + colorCode Green

-- -- One million stateful calculations at 100 ticks per second
-- integrate :: Int -> Int
-- integrate delta = feed where
--     feed = delta + delay 0 feed
-- tenTimes :: Int -> Int
-- tenTimes n =
--     integrate n + integrate n + integrate n + integrate n + integrate n +
--     integrate n + integrate n + integrate n + integrate n + integrate n
-- oneHundredTimes :: Int -> Int
-- oneHundredTimes n =
--     tenTimes n + tenTimes n + tenTimes n + tenTimes n + tenTimes n +
--     tenTimes n + tenTimes n + tenTimes n + tenTimes n + tenTimes n
-- oneThousandTimes :: Int -> Int
-- oneThousandTimes n =
--     oneHundredTimes n + oneHundredTimes n + oneHundredTimes n + oneHundredTimes n + oneHundredTimes n +
--     oneHundredTimes n + oneHundredTimes n + oneHundredTimes n + oneHundredTimes n + oneHundredTimes n
-- tenThousandTimes :: Int -> Int
-- tenThousandTimes n =
--     oneThousandTimes n + oneThousandTimes n + oneThousandTimes n + oneThousandTimes n + oneThousandTimes n +
--     oneThousandTimes n + oneThousandTimes n + oneThousandTimes n + oneThousandTimes n + oneThousandTimes n
-- oneHundredThousandTimes :: Int -> Int
-- oneHundredThousandTimes n =
--     tenThousandTimes n + tenThousandTimes n + tenThousandTimes n + tenThousandTimes n + tenThousandTimes n +
--     tenThousandTimes n + tenThousandTimes n + tenThousandTimes n + tenThousandTimes n + tenThousandTimes n
-- main :: Int
-- main =
--     oneHundredThousandTimes 1 + oneHundredThousandTimes 1


-- z :: Int
-- z = integrate 20

-- z :: Int
-- z = x where
--     x = 2 + delay 0 x

-- z :: Int
-- z = 10

-- w :: Int
-- w = 20

-- main :: Int
-- main = z

-- main :: Int
-- main = x where
--     x = 1 + delay 0 x

-- w :: Int
-- w = integrate 20

-- main :: Int
-- main = z + w

-- main :: Int
-- main = delay 0 (delay 1 (delay 2 (delay 3 main)))

-- main :: Int
-- main = x + y + z where
--     x = integrate 25
--     y = integrate 5

-- -- Loop
-- main :: Int
-- main = delay 0 (delay 100 (delay 200 (delay 300 main)))

-- z :: Int
-- z = delay 0 1

-- main :: Int
-- main = 1 + z + x where
--     x = delay 0 x

-- w :: Int
-- w = delay 0 100

-- z :: Int
-- z = 1 + delay 0 z

-- main = delay 1 (delay 2 3)

-- main :: Int
-- main = z + x where
--     x = 1 + delay 0 x

-- z :: Int
-- z = x where
--     x = 1 + delay 0 x

-- main :: Int
-- main = z

-- main :: Int
-- main = integrate 10 + z

-- main :: Int
-- main = x + z where
--     x = delay 0 x

-- g :: Int
-- g = x where
--     x = 1 + delay 0 x

-- z :: Int
-- z = x + g where
--     x = 1 + delay 0 x

-- main :: Int
-- main = z

-- main :: Int
-- main = x where
--     x = delay 0 x

-- main :: Int
-- main = x + y where
--     x = 1 + delay 0 x
--     y = 1 + delay 0 y

-- -- Looks like more than 1 persistent var is crashing things...
-- integrator :: Int -> Int
-- integrator delta = f where
--     f = delta + delay 0 f
-- TODO: Perhaps make delay a keyword instead of a function....!?

-- TODO: Unguarded recursion detection!

-- -- TODO: Mututally recursive bindings are not functioning in core!?!?
-- letrec in core?!?!?!
-- mutualRec :: Int
-- mutualRec = death where
--     death = toAll
--     toAll = death

-- -- TODO: Nested functions don't work in core!?!?!
-- nested :: Int
-- nested = f 0 + f 1 where
--     f x = x + 2

-- adder :: Int
-- adder = 666 * x + y * z where
--     x = 1 + 1
--     y = 2
--     z = 3

-- feedInt :: Float -> Float -> Float
-- feedInt delta offset = y + offset where
--     y = y + delta

-- tailNoState :: Int -> Int
-- tailNoState x = tailNoState y where
--     y = x * 2

-- callTailNoState :: Int
-- callTailNoState = x + x where
--     x = tailNoState 0

-- tailState :: Int -> Int
-- tailState x = tailState y where
--     y = y + x

-- callTailState :: Int
-- callTailState = x + x where
--     x = tailState 0

-- -- TODO: Need to enforce delay usage!
-- -- Causes assertion with optimizations on !?
-- feedInt :: Int
-- feedInt = x where
--     x = x + 1

-- -- TODO: Finish delay!
-- addSomeShit :: Int -> Int
-- addSomeShit x = x + x

-- main :: Int
-- main = addSomeShit 5

-- data Maybe a = Just a | Nothing
-- maybe :: Maybe Int
-- maybe = Just 0

-- data Either a b = Left a | Right b
-- leftOrRight :: Either Int Float
-- leftOrRight = Right 1.2 where

-- data KeepGoing = KeepGoing KeepGoing | TheEnd
-- keepGoing :: KeepGoing
-- keepGoing = y where
--     x = KeepGoing x
--     y = KeepGoing y

-- data Nullary = Nullary
-- nullaryTest :: Nullary
-- nullaryTest = n where
--     n = n
--     z = z

-- data CakeOrDeath = Cake | Death Nullary | MorePlease CakeOrDeath CakeOrDeath
-- cakeTest1 :: CakeOrDeath
-- cakeTest1 = Cake
--
-- cakeTest2 :: CakeOrDeath
-- cakeTest2 = Death Nullary
--
-- cakeTest3 :: CakeOrDeath
-- cakeTest3 = MorePlease z x where
--     z = MorePlease x y
--     x = Cake
--     y = Death Nullary

-- data Maybe a = Just a | Nothing

-- dropOne :: a -> a -> a
-- dropOne x y = dropOne x y

-- dropTwo :: a -> a -> a
-- dropTwo x y = dropOne x y

-- gimme :: Maybe ()
-- gimme = dropOne (dropOne Nothing Nothing) (Just ()) where
--     x = x
--     y = Just ()

-- -- TODO: Support anonymous functions!
-- lambdaTest :: Int
-- lambdaTest = (\x -> x) 1

-- simpleRec :: Int
-- simpleRec = simpleRec

-- lowerRec1 :: Int
-- lowerRec1 = recX where
--     recX = recX

-- lowerRec2 :: Int
-- lowerRec2 = recX + y where
--     recX = recX
--     recY = recX + recY
--     y    = 0

-- recFunc :: Int -> Int
-- recFunc x = maybeRecValue
-- recValue :: Int
-- recValue = maybeRecFunc 0

-- statelessFunc :: Int -> Int
-- statelessFunc x = y where
--     y = y

-- topMutRecX :: Int
-- topMutRecX = topMutRecY

-- topMutRecY :: Int
-- topMutRecY = topMutRecX

-- -- TODO: Remember that mutual recursion is missing in core!
-- recTest :: Int
-- recTest = x + y + z where
--     x = y
--     y = x
--     z = 0

-- feedTest :: Int
-- feedTest = x where
--     x = z where z = x
--     y = x

-- -- Require delay node for state
-- -- ...But how to enforce!??!?!
-- intTest :: Int
-- intTest = 0 + y * x + z + w where
--     y = y
--     x = x
--     z = 0 + 1
--     w = 3 * 3

-- data Nullary = Nullary
-- nullaryTest :: Nullary
-- nullaryTest = x where
--     x = Nullary

-- id :: a -> a
-- id x = x

-- appTest :: Nullary
-- appTest = id (id (id Nullary))

-- -- Finish App!
-- id :: a -> a
-- id i = f where
--     f = f

-- funTest :: Int -> Int
-- funTest x = x + y where
--     y = 2 * 3

-- funTest2 :: Int -> Int -> Int
-- funTest2 x y = x + y + z + w where
--     z = 4
--     w = z + x + y
--
-- appTest :: Nullary
-- appTest = id (id (id Nullary))
--

-- -- TODO: Finish!
-- data Nullary = Nullary
-- doubleID :: a -> b -> a
-- doubleID x y = x

-- doubleTest :: Int
-- doubleTest = doubleID 0 Nullary

-- numTest :: Num a => a -> a -> a
-- numTest x y = x + y

-- data Doom a = Doom a Int
-- appliedDoom :: () -> Int -> Doom ()
-- appliedDoom x i = Doom x i

-- selfRec :: Int
-- selfRec = y + selfRec where
--     y = 3

-- deadSimple :: Int
-- deadSimple = onlyOne where
--     onlyOne = 1

-- soManyInsaneBinds :: Int
-- soManyInsaneBinds = a * x + y - soManyInsaneBinds where
--     a = 33
--     x = z + w where
--         z = 4 + w
--         w = 3
--     y = u + v + x where
--         u = 5
--         v = 6 + a

-- -- TODO: TEMP NODES!!!!!
-- data Doom a = Doom a Int
-- doomsday :: Doom (Doom Int)
-- doomsday = Doom (Doom left right) 0 where
--     left  = 1
--     right = 2

-- -- TODO: TEMP NODES!!!!!
-- -- If all owned nodes are cached at the very top level node
-- -- Then it is simple to capture variables, even for functions!?
-- doomsday :: Int
-- doomsday = x + y + z + doomsday where
--     x = 1 + 3
--     y = 2 + x + w where w = 4
--     z = 3 + y

-- anotherFloat :: Float
-- anotherFloat = l + r / 3 where
--     l = 4
--     r = 5

-- -- Init function needs to be passed all captured variable node
-- -- AND all captured variable node for each owned node
-- -- If we inline all owned node instances perhaps we can obviate the need for captured variables in values (but not functions)
-- twoLevelsDown :: Int
-- twoLevelsDown = levelOne where
--     levelOne = levelTwo where
--         levelTwo = levelThree where
--             levelThree = levelOne + levelTwo

-- floatTest :: Float
-- floatTest = 4.321
--
-- rationalTest :: Rational
-- rationalTest = 987654321
--
-- audioTest :: Audio
-- audioTest = 987654321
--
-- unitTest :: ()
-- unitTest = ()
--
-- data Nullary = Nullary
--
-- nullaryTest :: Nullary
-- nullaryTest = Nullary
--
-- data ThereCanBeOnlyOne = ThereCanBeOnlyOne Int
--
-- thereCanBeOnlyOneTest :: ThereCanBeOnlyOne
-- thereCanBeOnlyOneTest = ThereCanBeOnlyOne 0
--
-- data CakeOrDeath = Cake Int | Death () Float
--
-- cake :: CakeOrDeath
-- cake = Cake 0
--
-- death :: CakeOrDeath
-- death = Death () 3.3
--
-- data Polymorph a = Polymorph a a | Newt
--
-- polymorph :: Polymorph Int
-- polymorph = Polymorph 0 0
--
-- newt :: Polymorph Int
-- newt = Newt
--
-- testUntilYouDie :: Polymorph ()
-- testUntilYouDie = x where x = Newt
--
-- data Lopsided = Light () | Heavy Int Int Int Int Int | Empty
--
-- lopsidedTest :: Lopsided
-- lopsidedTest = Light ()
--
