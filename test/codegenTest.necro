-- -- TODO: Mututally recursive bindings are not functioning in core!?!?
-- mutualRec :: Int
-- mutualRec = death where
--     death = toAll + 1
--     toAll = death + 1

-- -- TODO: Nested functions don't work in core!?!?!
-- nested :: Int
-- nested = f 0 + f 1 where
--     f x = x + 2

-- selfRec :: Int
-- selfRec = y + selfRec where
--     y = 3

-- deadSimple :: Int
-- deadSimple = onlyOne where
--     onlyOne = 1

-- soManyInsaneBinds :: Int
-- soManyInsaneBinds = a * x + y - soManyInsaneBinds where
--     a = 33
--     x = z + w where
--         z = 4 + w
--         w = 3
--     y = u + v + x where
--         u = 5
--         v = 6 + a

-- TODO: TEMP NODES!!!!!
data Doom a = Doom a Int
doomsday :: Doom (Doom Int)
doomsday = Doom (Doom left right) 0 where
    left  = 1
    right = 2

-- -- Init function needs to be passed all captured variable node
-- -- AND all captured variable node for each owned node
-- -- If we inline all owned node instances perhaps we can obviate the need for captured variables in values (but not functions)
-- twoLevelsDown :: Int
-- twoLevelsDown = levelOne where
--     levelOne = levelTwo where
--         levelTwo = levelThree where
--             levelThree = levelOne + levelTwo

-- floatTest :: Float
-- floatTest = 4.321
--
-- rationalTest :: Rational
-- rationalTest = 987654321
--
-- audioTest :: Audio
-- audioTest = 987654321
--
-- unitTest :: ()
-- unitTest = ()
--
-- data Nullary = Nullary
--
-- nullaryTest :: Nullary
-- nullaryTest = Nullary
--
-- data ThereCanBeOnlyOne = ThereCanBeOnlyOne Int
--
-- thereCanBeOnlyOneTest :: ThereCanBeOnlyOne
-- thereCanBeOnlyOneTest = ThereCanBeOnlyOne 0
--
-- data CakeOrDeath = Cake Int | Death () Float
--
-- cake :: CakeOrDeath
-- cake = Cake 0
--
-- death :: CakeOrDeath
-- death = Death () 3.3
--
-- data Polymorph a = Polymorph a a | Newt
--
-- polymorph :: Polymorph Int
-- polymorph = Polymorph 0 0
--
-- newt :: Polymorph Int
-- newt = Newt
--
-- testUntilYouDie :: Polymorph ()
-- testUntilYouDie = x where x = Newt
--
-- data Lopsided = Light () | Heavy Int Int Int Int Int | Empty
--
-- lopsidedTest :: Lopsided
-- lopsidedTest = Light ()
--
