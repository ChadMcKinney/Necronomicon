data Maybe  a   = Just a | Nothing
data Either a b = Left a | Right b

instance Functor Maybe where
    map f (Just x) = Just (f x)

instance Applicative Maybe where
    pure x               = Just x
    ap (Just f) (Just x) = Just (f x)
    ap _        _        = Nothing

instance Monad Maybe where
    bind (Just x) f = f x
    bind Nothing  _ = Nothing

maybeTest :: Audio -> Maybe Audio
maybeTest z = do
    x      <- Just 1
    y      <- Just (x + z)
    (u, v) <- Just (0, 1)
    Nothing
    Just (2 + u)
    -- TODO: Fix!!!
    -- ap (map add Nothing) Nothing
    pure (y - v)

eitherTest z = do
    pure z

-- Need >>=, <>, &&, ||, |>, <|, etc
numBinOps x y = x + y - x / 4 * 3
eqBinOps1 x y = x == y
eqBinOps2 x y = x /= y
ltTest    x y = x < y
gtTest    x y = x > y
lteTest   x y = x <= y
gteTest   x y = x >= y
consTest (x : y) = x : y
