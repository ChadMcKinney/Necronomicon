data Maybe a = Just a | Nothing
data Either a b = Either a b

class Semigroup a where
    append :: a -> a -> a
    -- test2 :: a b -> a b

maybeTest :: Maybe a -> Maybe a
maybeTest (Just x) = Just x

-- class Monad m where
--     pure :: a -> m a

--     bind :: (a -> m a) -> (a -> m b) -> m b

-- instance Monad (Maybe a) where
--     pure x = Just x

-- class Semigroup a => Monoid a where
--     mempty :: a
--
-- class NullClass a where
--     null :: a -> ()

-- instance Semigroup Int where
--     append x y = x + y

-- TODO: Fix Type constructors and kind arity handling
-- instance Semigroup a => Semigroup (Maybe a) where
--     append (Just x) (Just y) = Just (append x y)
--     append Nothing  (Just y) = Just y

-- instance Monad Maybe where
--     pure x = Just x

-- appendTest :: (Semigroup a, Semigroup b) => a -> b -> a
-- appendTest x y = append x x
--     where
--         notUsed = append y y
--
-- appendInt :: Int -> Int
-- appendInt x = appendTest x x
--
-- appendMaybe1 :: Maybe Int -> Maybe Int
-- appendMaybe1 x = appendTest x x
--
-- appendMaybe2 :: Monoid a => Maybe a -> Maybe a
-- appendMaybe2 x = appendTest x x

maybeTest2 :: Maybe Int -> Int
maybeTest2 (Just x) = x
maybeTest2 Nothing  = 0

-- conTest :: Monad m => a -> m a
-- conTest a = pure a
