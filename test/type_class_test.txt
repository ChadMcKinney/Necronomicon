data Maybe a = Just a | Nothing

class Semigroup a where
    append :: a -> a -> a
    other :: a -> a

class Semigroup a => Monoid a where
    mempty :: a

class NullClass a where
    null :: a -> ()

instance Semigroup Int where
    append x y = x + y

instance Semigroup a => Semigroup (Maybe a) where
    append (Just x) (Just y) = Just (append x y)
    append Nothing  (Just y) = Just y

appendTest :: (Semigroup a, Semigroup b) => a -> b -> a
appendTest x y = append x x
    where
        notUsed = append y y

appendInt :: Int -> Int
appendInt x = appendTest x x

appendMaybe1 :: Maybe Int -> Maybe Int
appendMaybe1 x = appendTest x x

appendMaybe2 :: Monoid a => Maybe a -> Maybe a
appendMaybe2 x = appendTest x x
