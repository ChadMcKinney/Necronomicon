class Show a where
    show :: b -> [Char]

class Semigroup a where
    append :: a -> a -> a

class Semigroup a => Monoid a where
    mempty :: a

data Maybe a = Just a | Nothing

data IntList = IntList [Int]

instance Semigroup a => Semigroup (Maybe a) where
    append _        _        = Nothing

instance Semigroup a => Semigroup ([] a) where
    append xs = xs

instance Semigroup Int where
    append x y = x + y

data Either a b = Either a b

instance (Semigroup a, Semigroup b) => Semigroup (Either a b) where
