-- TODO: Right now making sure the order of dictionaries and arguments lines up correctly!!!!
-- TODO: Make sure selector argument ordering / forwarding IS CORRECT!!!!
-- TODO: Where are the dictionary and selector ast's going?!!?!?!?
-- TODO: Makre sure dictionaries get renamed correctly to get passed correct ID!!!!
-- TODO: Make sure nested super dictionaries are added and applied in correct order!!!
-- TODO: Numeric patterns seem messed up!?


class ClassTest a where
    method1 :: (Num b, Num c, Num d) => a -> b -> c -> d -> ()
    method2 :: (Num b, Num c, Num d) => b -> c -> d -> () -> a
    method3 :: a -> a

-- data Either a b = Left a | Right b
-- instance (Eq a, Num b) => ClassTest (Either a b) where
--     method1 _ _ _ _   = ()
--     method2 _ _ _ _   = Right 0
--     method3 (Right x) = method2 x x x ()
--     -- TODO: ^^^ This is causing a type error for some reason!? Perhaps related to multi-type-var constructors!?

data Maybe a = Just a | Nothing
instance (Eq a, Num a) => ClassTest (Maybe a) where
    method1 _ _ _ _  = ()
    method2 _ _ _ _  = Nothing
    method3 (Just x) = method2 x x x ()

-- TODO: Should detect duplicates earlier than this!
-- instance Num a => ClassTest (Maybe a) where

methodTypeConTest1 :: Rational -> Audio -> Int -> Maybe Float -> ()
methodTypeConTest1 b c d a = method1 a b c d

methodTypeConTest2 :: Rational -> Audio -> Int -> () -> Maybe Float
methodTypeConTest2 b c d u = method2 b c d u

methodTypeVarTest1 :: ClassTest a => Rational -> Audio -> Int -> a -> ()
methodTypeVarTest1 b c d a = method1 a b c d

methodTypeVarTest2 :: ClassTest a => Rational -> Audio -> Int -> () -> a
methodTypeVarTest2 b c d u = method2 b c d u

nonMethodTypeConTest1 :: Maybe Float -> ()
nonMethodTypeConTest1 x = methodTypeVarTest1 0 0 0 x

nonMethodTypeConTest2 :: Maybe Float
nonMethodTypeConTest2 = methodTypeVarTest2 0 0 0 ()

nonMethodTypeVarTest1 :: ClassTest a => a -> ()
nonMethodTypeVarTest1 x = methodTypeVarTest1 0 0 0 x

nonMethodTypeVarTest2 :: ClassTest a => a
nonMethodTypeVarTest2 = methodTypeVarTest2 0 0 0 ()

whereTest :: ClassTest a => Int -> a
whereTest x = subF where
    subF = method2 x x x ()

opTest1 :: Audio -> Audio
opTest1 x = 100 + x

opTest2 :: Num a => a -> a
opTest2 x = 100 + x

leftSectionTest1 :: Audio -> Audio -> Audio
leftSectionTest1 x = (x+)

leftSectionTest2 :: Fractional a => a -> a -> a
leftSectionTest2 x = (x+)

rightSectionTest1 :: Audio -> Audio -> Audio
rightSectionTest1 x = (+x)

rightSectionTest2 :: Fractional a => a -> a -> a
rightSectionTest2 x = (+x)

-- TODO Finish
-- patL :: Num a => a
-- patR :: Num a => a
-- (patL, patR) = (0, 1)
-- (patL', patR') = mkTuple
-- (patL,  patR)  = (\dic -> patLF dic, \dic -> patRF dic)

-- coolSynth :: Audio -> Audio
-- coolSynth freq = osc (freq * 2) + 1 where
--     osc y = 220 * y

-- Check that Sequences work
