pi :: Rational
pi = 3.141592654

satan :: Int
satan = 666

something :: Int
something = somethingElse where
    somethingElse = 1234

whereas :: Int
whereas = one where
    one = two
    two = three
    three = four
    four = five
    five = six
    six = 6

one :: Int
one = let two = three
          three = four
          four = five
          five = six
          six = 6
      in two

onePlusTwo :: Int
onePlusTwo = 1 + 2

simpleCase :: Int
simpleCase = case onePlusTwo of
                  1 -> 111
                  2 -> 222
                  _ -> satan

data Octopus = OctoHead | OctoTentacles

data Tome a = Page a | Spell a

page :: Tome Float
page = Page 666

readBook = case page of
                 Page p -> p
                 Spell s -> s

data Tree a = Tip | Node (Tree a) a (Tree a)

ifThenElse :: Int
ifThenElse = if onePlusTwo == 3 then 4 else 5

oneArgLambda :: Float -> Float
oneArgLambda = \a -> 1.23

oneArgFunc :: Float -> Float
oneArgFunc a = 1.23

twoArgLambda :: Float -> Float -> Float
twoArgLambda = \a b -> a + b

twoArgFunc :: Float -> Float -> Float
twoArgFunc a b = a + b

threeArgLambda :: Float -> Float -> Float -> Float
threeArgLambda = \a b c -> a + b / c

threeArgFunc :: Float -> Float -> Float -> Float
threeArgFunc a b c = a + b / c

patternLambda :: Tome a -> a
patternLambda = \(Page p) -> p

patternFunc :: Tome a -> a
patternFunc (Page p) = p

--firstTuple = a where (a, b) = (1, 2)
-- (a, b) = (1, 2)

teaLeaves :: Tree Int -> Int
teaLeaves t = case t of
                  Tip -> 0
                  Node (Node _ a _) b (Node _ c _) -> a + b - c

plusMinus :: Float
plusMinus = 1 / 2 - 3 * 4 + 5

plusMinusN :: Num a => a
plusMinusN = 1 + 2 - 3

plusMinusF :: Fractional a => a
plusMinusF = 1 + 2 - 3

data Maybe a = Just a | Nothing
maybeAdd :: Num a => Maybe a -> Maybe a -> Maybe a
maybeAdd (Just x) (Just y) = Just (x + y)

patTest :: Pattern Audio
patTest = 0 + 1 / 3.1

--octopus = "Octopus"

tuple :: (Int, Int)
tuple = (1, 2)

tuple3 :: (Int, Int, Int)
tuple3 = (1, 2, 3)

tuple4 :: (Int, Int, Int, Int)
tuple4 = (1, 2, 3, 4)

tuplesAllTheWayDown :: ((((Int, Int), Int, Int, Int), Int), Int, (Int, ((Int, Int, Int), Int), Int), Int)
tuplesAllTheWayDown = ((((1, 2), 3, 4, 5), 6), 7, (8, ((9, 10, 11), 12), 13), 14)

--curryTuple = (,) $ 1

apply f a = f a 

emptyListTest :: [a]
emptyListTest = []

patInt :: Int
patInt = a + b where
    (a, b) = (1, 2)

--listTest :: [Int]
--listTest = [1, 2]

--listTest2 :: [Int]
--listTest2 = 1 : 2 : []i
