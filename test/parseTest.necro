constant1 = 10
constant2 = 55.8
constant3 = 'c'
constant4 = "This is a test"

binop1 = 10 + 5 * 3
binop2 = 1000.0 <> 3.2 |> 44.4

initialValue ~ 10 = initialValue + 1

ifThenElse = if True then 0.0 else 1.0

apats f x = f x

letX = let x = Nothing in x

wildCard _ = 333

giveUsLambdas = \w -> w 'a'

(l, r) = (True, False)

expressionList = ["one", "two", "three"]

expressionArray = {'1', '2', '3'}

leftSection = (10 +)

rightSection = (/ 100)

patIsATerribleName = pat 0 1 _ 3

constructor1 (Just (Just x)) = x
constructor2 [0, 1, 2]       = 1
constructor3 (x, y, z)       = z

binOpSym (x : y : xs) = xs

arithmeticSequence1 = [0..]
arithmeticSequence2 = [0..100]
arithmeticSequence3 = [0, 100..1000]

case1 =
  case Nothing of
    Nothing -> 0
    Just i  -> i


case2 =
  case case1 of
    [0, 1, 2] -> 1
    z : zs    -> z

decl = x - 3
  where
    x = 1000

doBlock = do
  d <- pure 10
  pure d

patDo = do
  Just p <- pure 100
  pure p

data Either a b = Left a | Right b

case1 :: Maybe Int -> Int
case2 :: Num a => a -> a
patDo :: (Num a, Eq b) => a -> b -> b

class Eq a => HaveSomeClass a where
  methodToTheMadness :: Int -> a

instance HaveSomeClass Bool where
  methodToTheMadness _ = True

multiDef1 Nothing  = 0
multiDef1 (Just x) = x

-- -- Note: This should be an error!
-- multiDef1 Nothing 0
-- multiDef1 (Just x) = x

-- TODO: Figure out a way not to mangle pattern assignments!
(left, right) = (20, 30)
