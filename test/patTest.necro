latch :: a -> Event a -> a
latch x _ = x

poly :: Num a => (a -> a) -> Event a -> a
poly _ _ = 0

id :: a -> a
id x = x

speed :: Rational -> Pattern a -> Pattern a
speed _ x = x

-- psample :: a -> Pattern a

-- play :: Pattern a -> Event a
-- play _

-- coolSynth :: Audio
-- coolSynth = poly id <| play patTest

-- TODO: Pattern list/Tuples

-- seq vs pat:
-- seq is a series of patterns, each pattern plays out before moving to the next
-- beat is a series of patterns, where each slot is played for the duration of that beat before moving on to the next
-- par is a series of patterns, where each  slots is playing in parallel and you get the value of that beat at that moment
-- TODO: How to implement?!?!?!
patTest :: Pattern Audio
patTest = pat beat
    0 z _ x
    _ 3 y z
    where
        x = 0.5 * 2
        y = par beat 0 _ 1 _
        z = 666 * 323
