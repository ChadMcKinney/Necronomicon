-- Patterns are a simple and naive function wrapper,
-- giving simple and easy to reason about Call-by-name semantics

data Time
  = Time Int

data Event a
  = Event [(Time, a)]

data PVal a
  = PPlay  (Event a)
  | PYield (Event a)
  | PDone

data Patterna a
  = Pattern (Time -> PVal a)

runPattern :: Pattern a -> Time -> PVal a
runPattern p t =
  case p of
    Pattern f ->
      f t

playPattern :: Pattern a -> Event a
playPattern p =
  case runPattern p 1 of
    PPlay  e -> e
    PYield e -> e
    PDone    -> Event []

desugarBeat :: PatternAudio
desugarBeat =
  Pattern sugarBeatPat

seqYieldAndIncrement :: Int -> Int -> PVal a -> (Int, PVal a)
seqYieldAndIncrement i max pv =
  case pv of
    PYield ev ->
      if (i + 1) >= max
        then (0, pv)
        else (i + 1, PPlay ev)
    _ ->
      (i, pv)

beatYieldAndIncrement :: Int -> Int -> PVal a -> (Int, PVal a)
beatYieldAndIncrement i max pv =
  if (i + 1) >= max then
    case pv of
      PDone    -> (0, PDone)
      PPlay ev -> (0, PYield ev)
      _        -> (0, pv)
  else
    case pv of
      PDone     -> (i + 1, PDone)
      PYield ev -> (i + 1, PPlay ev)
      _         -> (i + 1, pv)

-- Note:
--    * All must be Yield to Yield
--    * If any one is Done, all are Done.

sugarPat :: Pattern Audio
sugarPat =
  seq x y (x + y) 1
  where
    x = beat 1 2 3 4
    y = beat 3 2 1

seq :: Array (Pattern a) -> Pattern a
seq ps =
  Pattern pf
  where
    pf t = pval
      where
        (i ~ 0, pval) = foldl (seqPlayYieldIncrement i (length ps) t) ps

beat :: Array (Pattern a) -> Pattern a
beat ps =
  Pattern pf
  where
    pf t = pval
      where
        (i ~ 0, pval) = foldl (beatPlayYieldIncrement i (length ps) t) ps

demand :: (Time -> a) -> Pattern a
demand f = Pattern (PYield . f)

interlace :: Array (Pattern a) -> Pattern Int -> Pattern a
interlace = ...

interlaceBeat :: Pattern Audio
interlaceBeat =
  interlace {x, y} <| beat
  0 _ [1 0] _
  where
    x = beat 1 2 3 4
    y = beat 3 2 1

coolBeat :: Pattern Audio
coolBeat =
  map (d2f minor) <| seq
  x y (y+y) z
  _ x [5 z] x
  _ 0 [1 2] y
  where
    x = beat 0 _ [1 2] 1
    y = 3
    z = pure mouseX / 100

